{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["/*\n * # Existing ES2015 equivalents\n *\n * | Ruby Enumerable | Javascript |\n * |-----------------|------------|\n * | all             | every      |\n * | any             | some       |\n * | count           | size       |\n * | detect          | find       |\n * | drop            |            |\n * | dropWhile       |            |\n * | eachWithIndex   | forEach    |\n * | eachWithObject  |            |\n * | first           |            |\n * | findIndex       |            |\n * | groupBy         |            |\n * | include         |            |\n * | inject          |            |\n * | map             | map        |\n * | none            |            |\n * | one             |            |\n * | partition       |            |\n * | reject          |            |\n * | reverseEach     |            |\n * | select          |            |\n * | take            |            |\n * | takeWhile       |            |\n * | toA             |            |\n *\n */\n\n// const ALIASES = {\n//   collect: 'map',\n//   entries: 'toA',\n//   find: 'detect',\n//   findAll: 'select',\n//   member: 'include',\n//   reduce: 'inject',\n// };\n\nexport function incr(a: number): number {\n  return a + 1;\n}\n\nexport function eachWithObject<T, U>(\n  e: Enumerable<T>,\n  obj: U,\n  fn: (obj: U, member: T) => U,\n): U {\n  const boundFn = (mbr: T) => fn(obj, mbr);\n\n  // FIXME:\n  //\n  // error TS2345: Argument of type '(mbr: T) => U' is not assignable to\n  // parameter of type 'T'.  '(mbr: T) => U' is assignable to the constraint of\n  // type 'T', but 'T' could be instantiated with a different subtype of\n  // constraint '{}'.\n  //\n  // @ts-ignore\n  e.each(boundFn);\n\n  return obj;\n}\n\nexport function map<T, U>(e: Enumerable<T>, fn: (member: T) => U): U[] {\n  return eachWithObject(e, [], (r: U[], member: T) => {\n    r.push(fn(member));\n    return r;\n  });\n}\n\nexport function select<T>(e: Enumerable<T>, fn: (member: T) => boolean): Enumerable<T> {\n  const n = Object.assign({}, e);\n  n.length = 0;\n  return eachWithObject(e, n, (r: Enumerable<T>, member: T) => {\n    if (fn(member)) r.push(member);\n    return r;\n  });\n}\n\nexport function reject<T>(e: Enumerable<T>, fn: (member: T) => boolean): T[] {\n  const reverseFn = (member: T) => !fn(member);\n  return select(e, reverseFn);\n}\n\ninterface Enumerable<T> extends Array<T> {\n  each: (member: T) => any;\n}\n"],"names":[],"mappings":";;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;SAEgB,IAAI,CAAC,CAAS;IAC5B,OAAO,CAAC,GAAG,CAAC,CAAC;AACf,CAAC;SAEe,cAAc,CAC5B,CAAgB,EAChB,GAAM,EACN,EAA4B;IAE5B,IAAM,OAAO,GAAG,UAAC,GAAM,IAAK,OAAA,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,GAAA,CAAC;;;;;;;;;IAUzC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IAEhB,OAAO,GAAG,CAAC;AACb,CAAC;SAEe,GAAG,CAAO,CAAgB,EAAE,EAAoB;IAC9D,OAAO,cAAc,CAAC,CAAC,EAAE,EAAE,EAAE,UAAC,CAAM,EAAE,MAAS;QAC7C,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC;QACnB,OAAO,CAAC,CAAC;KACV,CAAC,CAAC;AACL,CAAC;SAEe,MAAM,CAAI,CAAgB,EAAE,EAA0B;IACpE,IAAM,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;IAC/B,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC;IACb,OAAO,cAAc,CAAC,CAAC,EAAE,CAAC,EAAE,UAAC,CAAgB,EAAE,MAAS;QACtD,IAAI,EAAE,CAAC,MAAM,CAAC;YAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAC/B,OAAO,CAAC,CAAC;KACV,CAAC,CAAC;AACL,CAAC;SAEe,MAAM,CAAI,CAAgB,EAAE,EAA0B;IACpE,IAAM,SAAS,GAAG,UAAC,MAAS,IAAK,OAAA,CAAC,EAAE,CAAC,MAAM,CAAC,GAAA,CAAC;IAC7C,OAAO,MAAM,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC;AAC9B;;;;;;;;"}